from collections import deque
from typing import *
import unittest

#https://leetcode.cn/problems/binary-tree-inorder-traversal/solutions/9454/die-dai-he-di-gui-by-powcai/
#https://blog.csdn.net/lht0909/article/details/124349676
#https://blog.csdn.net/lht0909/article/details/124349676
# 还没写完
# Definition for a binary tree node.
class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right


# -----------树的常用方法类-----------------------------------
class Tree():
    # 列表生成树
    def buildTree(self, listArr, i, node: TreeNode):
        if (((i + 1) < len(listArr)) and (listArr[i + 1] != None)):
            node.left = TreeNode(listArr[i + 1], None, None)
        if (((i + 2) < len(listArr)) and (listArr[i + 2] != None)):
            node.right = TreeNode(listArr[i + 2], None, None)
        if node.left != None:
            self.buildTree(self, listArr, i + 1, node.left)
        if node.right != None:
            self.buildTree(self, listArr, i + 2, node.right)

    # 列表生成树
    def listToTree(self, listArr: List) -> TreeNode:
        i = 0
        root = TreeNode(listArr[i], None, None)
        self.buildTree(self, listArr, i, root)
        return root


    # 前序遍历 --递归
    def preTraverse(self, root: TreeNode):
        if root == None:
            return
        print(root.val, end=' ')
        self.preTraverse(self, root.left)
        self.preTraverse(self, root.right)

    # 中序遍历 --递归
    def midTraverse(self, root: TreeNode):
        if root == None:
            return
        self.midTraverse(self, root.left)
        print(root.val, end=' ')
        self.midTraverse(self, root.right)

    # 后序遍历 --递归
    def afterTraverse(self, root: TreeNode):
        if root == None:
            return
        self.afterTraverse(self, root.left)
        self.afterTraverse(self, root.right)
        print(root.val, end=' ')
    def levelOrder(self, root: Optional[TreeNode]) -> List[List[int]]:
        if root is None:
            return []
        ans = []
        q = deque([root])
        while q:
            vals = []
            for _ in range(len(q)):
                node = q.popleft()
                vals.append(node.val)
                if node.left:  q.append(node.left)
                if node.right: q.append(node.right)
            ans.append(vals)
        return ans
    def inorderTraversal2(self, root: TreeNode) -> List[int]:
        WHITE, GRAY = 0, 1
        res = []
        stack = [(WHITE, root)]
        while stack:
            color, node = stack.pop()
            if node is None: continue
            if color == WHITE:
                stack.append((WHITE, node.right))
                stack.append((GRAY, node))
                stack.append((WHITE, node.left))
            else:
                res.append(node.val)
        return res





class Solution:
    def midTraverseToList(self, root: TreeNode, res):
        if root == None:
            return
        self.midTraverseToList(root.left, res)
        res.append(root.val)
        self.midTraverseToList(root.right, res)

    def inorderTraversal(self, root: Optional[TreeNode]) -> List[int]:
        res = []
        self.midTraverseToList(root, res)
        return res






# -----------单元测试-----------------------------------
class TestSolution(unittest.TestCase):
    def test_1(self):
        # root = TreeNode(1, None, TreeNode(2, TreeNode(3, None, None), None))
        root = [1,None,2,3]
        treeRoot = Tree.listToTree(Tree, root)
        Tree.preTraverse(Tree, treeRoot)

        solution = Solution()
        res = solution.inorderTraversal(treeRoot)
        self.assertEqual(res, [1,3,2])


if __name__ == '__main__':
    unittest.main()
